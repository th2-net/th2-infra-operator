plugins {
    id 'application'
//    id 'checkstyle'
//    alias(libs.plugins.detekt)
    alias(libs.plugins.kotlin)
    alias(libs.plugins.th2.component)
    alias(libs.plugins.download)
}

group = 'com.exactpro.th2'
version = release_version

kotlin {
    jvmToolchain(11)
}

repositories {
    mavenCentral()
}

//checkstyle {
//    toolVersion = "10.12.4"
//}

//detekt {
//    buildUponDefaultConfig = true
//    autoCorrect = true
//    config.setFrom("$rootDir/config/detekt/detekt.yml")
//}

dependencies {
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    implementation libs.java.uuid.generator

    implementation "org.apache.commons:commons-text"

    implementation libs.kubernetes.client
    implementation(libs.okhttp) {
        because "okhttp:3.12.12 has vulnerabilities"
    }
    implementation(libs.logging.interceptor) {
        because "logging-interceptor:3.12.12 has vulnerabilities"
    }

    implementation "com.rabbitmq:amqp-client"
    implementation libs.http.client

    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl'
    implementation 'org.apache.logging.log4j:log4j-core'
    implementation libs.kotlin.logging
    implementation "org.jetbrains:annotations"

    implementation "io.prometheus:simpleclient"
    implementation "io.prometheus:simpleclient_httpserver"
    implementation "io.prometheus:simpleclient_hotspot"

    testImplementation(platform(libs.testcontainers.bom))
    testImplementation 'org.testcontainers:rabbitmq'
    testImplementation 'org.testcontainers:k3s'


    testImplementation libs.mockito.core
    testImplementation libs.mockito.kotlin
    testImplementation libs.junit.jupiter
    testImplementation libs.junit.jupiter.params
    testImplementation "org.jetbrains.kotlin:kotlin-test-junit5"
    testImplementation libs.bcpkix.jdk18on
    testImplementation libs.awaitility
    testImplementation libs.strikt.core

//    detektPlugins libs.detekt.formatting
}

wrapper {
    version '8.7'
    distributionType Wrapper.DistributionType.BIN
}

test {
    useJUnitPlatform {
        excludeTags("integration-test")
    }
}

tasks.register("downloadCRDs", Download) {
    group = "verification"
    src([
        'https://raw.githubusercontent.com/th2-net/th2-infra/master/chart/crds/th2-box-crd.yaml',
        'https://raw.githubusercontent.com/th2-net/th2-infra/master/chart/crds/th2-core-box-crd.yaml',
        'https://raw.githubusercontent.com/th2-net/th2-infra/master/chart/crds/th2-dictionary-crd.yaml',
        'https://raw.githubusercontent.com/th2-net/th2-infra/master/chart/crds/th2-estore-crd.yaml',
        'https://raw.githubusercontent.com/th2-net/th2-infra/master/chart/crds/th2-job-crd.yaml',
        'https://raw.githubusercontent.com/th2-net/th2-infra/master/chart/crds/th2-mstore-crd.yaml',
    ])
    dest layout.buildDirectory.dir('resources/test/crds').get()
}

tasks.register("integrationTest", Test) {
    group = "verification"
    dependsOn("downloadCRDs")
    useJUnitPlatform {
        includeTags("integration-test")
    }
    testLogging {
        showStandardStreams = true
    }
}

dependencyCheck {
    skipConfigurations += "checkstyle"
}